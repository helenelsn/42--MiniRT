- voir avec suz comment mettre la liste d'objets (la t_vlist) dans les nodes
    (ok de stocker un pointeur vers le meme emplacement memoire, 
    ou doit r√©allouer ?)
    : set_root_voxel()
- de meme, comment ajouter un objet dans les sous nodes 
    : split_objects()



----------------------------------------------------------------------------

creer une structure a part (liste chainee) pour les plans, qui ne seront
pas stockes dans l arbre.
comment les supprimer de la t_vlist initiale ? etant donne que va 
reutiliser la meme dans l arbre, il faudrait donc y enlever les plans

----------------------------------------------------------------------------

Marche a suivre (naive) :

// positionne la camera dans l arbre


pour chaque pixel :

t_point_3d pixel = canvas_to_viewpoint();
// calculer le vecteur camera-pixel
// resoudre l equation de l intersection avec les plans de l arbre
// resoudre l intersection avec les objets 
// en deduire le plus proche objet touche
// recommencer l operation 3 fois (3 rebonds) en prenant cette fois 
comme origine du rayon le point d intersection trouve precedemment (recursion)
// obtient au bout de 3 rebonds les proprietes finales du pixel (couleur, intensite lumineuse)
// colorie le pixel en fonction, puis passe au suivant



Translations, rotations, etc de la camera : la repositionne dans l arbre

Translations, rotations, etc d un objet : soit recalcule entierement l arbre, soit 
supprime l objet de l arbre et le met dans une liste chainee, et recalcule entierement l arbre
lorsque cette liste a plus de N elements (taille arbitraire)
bemol : si rotation d une sphere, ne fait rien