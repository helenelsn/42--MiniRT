

Pas dans les bonus mais styles :
soft shadows
depth of field
motion blur 



----------------------------------------------------------------------


checker dans le code (ctrl f)

//todo 
//tomodif
//tocheck


todo : intersect (intersection rayon - objects), intersect_scene (intersection rayon - scene) 


------------------------------------------------------------------------


trace ray :

- creer singletons pour distance, viewpoint height et viewpoint length

- calcul de la normale a un point selon l objet
- trouver le node correspondant a un point et une direction (rayon) donnee // place origin in tree
- calcul de l intersection rayon - objets 



------------------------------------------------------------------------



- Your program must be able to resize the objectâ€™s unique properties: diameter for a
sphere and the width and height for a cylinder.


- Your program must be able to apply translation and rotation transformation to
objects, lights and cameras (except for spheres and lights that cannot be rotated) 

    Translations, rotations, etc de la camera : la repositionne dans l arbre

    Translations, rotations, etc d un objet : soit recalcule entierement l arbre, soit 
    supprime l objet de l arbre et le met dans une liste chainee, et recalcule entierement l arbre
    lorsque cette liste a plus de N elements (taille arbitraire)
    bemol : si rotation d une sphere, ne fait rien


----------------------------------------------------------------------------

Marche a suivre (naive) du raytracer :

// positionne la camera dans l arbre

pour chaque pixel :

t_point pixel = canvas_to_viewpoint();
// calculer le vecteur camera-pixel
// resoudre l equation de l intersection avec les plans de l arbre
// resoudre l intersection avec les objets 
// en deduire le plus proche objet touche
// recommencer l operation 3 fois (3 rebonds) en prenant cette fois 
comme origine du rayon le point d intersection trouve precedemment (recursion)
// obtient au bout de 3 rebonds les proprietes finales du pixel (couleur, intensite lumineuse)
// colorie le pixel en fonction, puis passe au suivant